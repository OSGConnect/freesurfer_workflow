#!/usr/bin/env python

import cPickle
import getpass
import os
import sys

SITE_TEMPLATE = """<?xml version="1.0" encoding="UTF-8"?>
<sitecatalog xmlns="http://pegasus.isi.edu/schema/sitecatalog"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://pegasus.isi.edu/schema/sitecatalog http://pegasus.isi.edu/schema/sc-4.0.xsd"
             version="4.0">

    <site  handle="local" arch="x86_64" os="LINUX">
        <directory type="shared-scratch" path="/stash2/user/USERNAME/freesurfer_scratch/scratch">
            <file-server operation="all" url="file:///stash2/user/USERNAME/freesurfer_scratch/scratch"/>
        </directory>
        <directory type="local-storage" path="/stash2/user/USERNAME/freesurfer_scratch/output">
            <file-server operation="all" url="file:///stash2/user/USERNAME/freesurfer_scratch/output"/>
        </directory>
    </site>

    <site  handle="condorpool" arch="x86_64" os="LINUX">
        <profile namespace="pegasus" key="style">condor</profile>
        <profile namespace="condor" key="universe">vanilla</profile>
        <profile namespace="condor" key="requirements">(HAS_MODULES == TRUE) &amp;&amp; (IS_RCC_syracuse =!= TRUE) &amp;&amp; (GLIDEIN_ResourceName =!= "SU-OG")</profile>
    </site>

</sitecatalog>
"""

PEGASUSRC_TEMPLATE = """

pegasus.catalog.site = XML4
pegasus.catalog.site.file = CONF_DIR/sites.xml

pegasus.dir.useTimestamp = true
pegasus.dir.storage.deep = true
pegasus.condor.logs.symlink = false

pegasus.dir.storage.mapper = Flat
pegasus.dir.storage.deep = True

pegasus.data.configuration = condorio

dagman.maxidle = 1000
"""

WORKFLOW_DIRECTORY = os.path.join('/stash2/user',
                                  getpass.getuser(),
                                  'freesurfer_scratch',
                                  'freesurfer')


def config_user_settings():
    """
    Check system and generate sites.xml and pegasusrc for freesurfer usage

    :return: exit code -- 0 on success, 1 on failure
    """
    conf_dir = os.path.expanduser('~/.fsurf/')
    if not os.path.exists(conf_dir):
        os.mkdir(conf_dir)
    if not os.path.isdir(conf_dir):
        sys.stdout.write("{0} exists and is not a directory, exiting...\n".format(conf_dir))
        return 1
    pegasusrc = os.path.join(conf_dir, 'pegasusrc')
    with open(pegasusrc, 'w') as f:
        f.write(PEGASUSRC_TEMPLATE.replace('CONF_DIR', conf_dir))
    user = getpass.getuser()
    sitecatalog = os.path.join(conf_dir, 'sites.xml')
    with open(sitecatalog, 'w') as f:
        f.write(SITE_TEMPLATE.replace('USERNAME', user))
    sys.stdout.write("Configuration created for fsurf\n")
    return 0


def setup_fsurf_dirs(workflow_dir=WORKFLOW_DIRECTORY):
    """
    Setup directories and pickled files for fsurf

    :return: exit code -- 0 on success, 1 on failure
    """
    try:
        if os.path.isdir(workflow_dir):
            pickle_filename = os.path.join(workflow_dir, 'fsurf_workflows.pkl')
            if os.path.exists(pickle_filename):
                with open(pickle_filename, 'rb') as f:
                    workflows = cPickle.load(f)
                if type(workflows) != dict:
                    sys.stdout.write("Resetting saved workflow"
                                     " information\n")
                    with open(pickle_filename, 'wb') as f:
                        cPickle.dump({}, f, cPickle.HIGHEST_PROTOCOL)

            else:
                with open(pickle_filename, 'wb') as f:
                    cPickle.dump({}, f, cPickle.HIGHEST_PROTOCOL)
            return 0
        elif os.path.exists(workflow_dir) and not os.path.isdir(workflow_dir):
            sys.stdout.write("Can't create {0} because it ".format(workflow_dir) +
                             "is already present and not a directory\n")
            return 1
        else:
            sys.stdout.write("Creating directory for workflows\n")
            os.makedirs(workflow_dir, 0o700)
            pickle_filename = os.path.join(workflow_dir, 'fsurf_workflows.pkl')
            with open(pickle_filename, 'wb') as f:
                cPickle.dump({}, f, cPickle.HIGHEST_PROTOCOL)
            return True
    except OSError:
        sys.stdout.write("Can't create {0} for workflows, "
                         "exiting...\n".format(workflow_dir))
        return False


if __name__ == "__main__":
     exit_code = config_user_settings()
     exit_code += setup_fsurf_dirs()

